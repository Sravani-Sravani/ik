<!DOCTYPE html>
<html>
<head>
    <title>Email Template</title>
</head>
<body>
    <h1>Hello [$NAME$]</h1>
    <p>Thank you for registering for the event.</p>
    <img src="cid:event_logo" alt="Event Logo" />
    <p>Event Details:</p>
    <ul>
        <li>Event Name: [$EVENT_NAME$]</li>
        <li>Date: [$EVENT_DATE$]</li>
        <!-- Add more dynamic data here -->
    </ul>
</body>
</html>

import com.liferay.mail.kernel.model.MailMessage;
import com.liferay.mail.kernel.service.MailServiceUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCActionCommand;
import com.liferay.portal.kernel.template.Template;
import com.liferay.portal.kernel.template.TemplateConstants;
import com.liferay.portal.kernel.template.TemplateManager;
import com.liferay.portal.kernel.template.TemplateResource;
import com.liferay.portal.kernel.template.TemplateResourceLoader;
import com.liferay.portal.kernel.template.TemplateResourceLoaderUtil;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.WebKeys;

import javax.mail.internet.InternetAddress;
import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.ProcessAction;

import java.io.Writer;

public class MailSenderPortlet extends MVCActionCommand {

    @ProcessAction(name="sendMail")
    public void sendMail(ActionRequest actionRequest, ActionResponse actionResponse) {
        try {
            ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY);

            String recipientEmail = ParamUtil.getString(actionRequest, "recipientEmail");
            String subject = ParamUtil.getString(actionRequest, "subject");

            // Load the HTML template
            String templatePath = "/templates/email_template.html";
            String langType = TemplateConstants.LANG_TYPE_FTL; // Replace with the appropriate template language if necessary
            TemplateResourceLoader templateResourceLoader = TemplateResourceLoaderUtil.getTemplateResourceLoader(langType);
            TemplateResource templateResource = templateResourceLoader.getTemplateResource(templatePath);
            TemplateManager templateManager = TemplateManager.getInstance(langType);
            Template template = templateManager.getTemplate(templateResource, false);

            // Replace placeholders with dynamic data
            String name = "John Doe"; // Retrieve the name from your portlet's data source
            String eventName = "Sample Event"; // Retrieve the event name from your portlet's data source
            String eventDate = "2023-07-31"; // Retrieve the event date from your portlet's data source

            template.put("NAME", name);
            template.put("EVENT_NAME", eventName);
            template.put("EVENT_DATE", eventDate);

            // Get the HTML content after merging data
            String htmlContent = mergeTemplate(themeDisplay, template);

            InternetAddress fromAddress = new InternetAddress(themeDisplay.getCompany().getEmailAddress(), "Your Company");
            InternetAddress toAddress = new InternetAddress(recipientEmail);

            MailMessage mailMessage = new MailMessage();
            mailMessage.setTo(toAddress);
            mailMessage.setFrom(fromAddress);
            mailMessage.setSubject(subject);
            mailMessage.setBody(htmlContent);
            mailMessage.setHTMLFormat(true);

            // You can also attach inline images to the email
            // Add images to your resources folder and reference them in the HTML template using 'cid'
            mailMessage.addFile("event_logo", getEventLogoBytes());

            MailServiceUtil.sendEmail(mailMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Helper method to get the event logo bytes (replace with your implementation)
    private byte[] getEventLogoBytes() {
        // Load and return the bytes of the image
        // Replace this with your code to load the image from a file or other sources
        return new byte[0];
    }

    // The mergeTemplate method is the same as shown in the previous response

    // The UnsyncStringWriter class is the same as shown in the previous response
}
